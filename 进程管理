1、进程的基本概念
  程序的顺序执行及其特征
    程序的顺序执行
    程序顺序执行时的特征：顺序性、封闭性、可再现性
    前趋图 precedence graph 有向无循环图
  程序的并发执行及其特征
    程序的并发执行：间断性、失去封闭性、不可再现性
  进程的特征与状态
    进程的特征和定义：结构特征、动态性、并发性、独立性、异步行
    进程的定义：进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位
    进程的三种基本状态：
      就绪状态
      执行状态
      阻塞状态（等待状态）：
        请求I/O，申请缓冲空间
      挂起状态
        终端用户的请求
        父进程请求
        负荷调节的需要
        操作系统的需要
      创建状态和终止状态
    进程控制块
      进程控制块的作用
        Linux：task_struct Windows：EPROCESS
      进程控制块中的信息
        进程标识符：内部标识符、外部标识符
        处理机状态：通用寄存器、指令计数器、程序状态字PSW、用户栈指针
        进程调度信息：进程状态、进程优先级、进程调度所需的其他信息、事件（阻塞原因）
        进程控制信息：程序和数据的地址、进程同步和通信机制、资源清单、链接指针
      PCB的组织方式：链接方式、索引方式
  
  进程控制
  原语：primitive
    进程的创建：
      进程图
      引起创建进程的事件：
        用户登录
        作业调度
        提供服务
        应用请求
      进程的创建：
        申请空白PCB->为新进程分配资源->初始化进程控制块->将新进程插入就绪队列
        
    进程的终止：
      正常结束：Holt、Logs off
      异常结束：越界错误、保护措、非法指令、特权指令错、运行超时、等待超时、算术运算错、i/O故障
      外界干预：操作员或操作系统干预、父进程请求、父进程终止
      进程的终止过程：
        根据被终止进程的标识符，从PCB集合中检索出该进程的PCB，从中读取该进程的状态
        若被终止进程正处于执行状态，应立即终止该进程的执行，并置调度标识为真，用于指示该进程被终止后应重新进行调度
        若该进程还有子孙进程，还应将其所有子孙进程予以终止，以防他们成为不可控的进程
        将被终止进程所拥有的全部资源，或者归还给其父进程，或者归还给系统
        将被终止进程PCB从所在队列或链表中移除，等待其他程序来搜索信息
        
    进程的阻塞与唤醒：
      引起进程阻塞和唤醒的事件：
        请求系统服务
        启动某种操作
        新数据尚未到达
        无新工作可做
        
    进程的挂起与激活
      进程的挂起过程
      进程的激活过程
      
  进程同步
    进程同步的基本概念：
      两种形式的制约关系：间接相互制约关系、直接相互制约关系
      临界资源：critical resource
        生产者-消费者问题
      临界区：进入去、临界区、退出区
      同步机制应遵循的规则：
        空闲让进
        忙则等待
        有限等待
        让权等待：当进程不能进入自己的临界区时，应立即释放处理机，以免进程陷入“忙等”状态
    信号量机制：
      整数形信号量：P、V：wait(S)、signal(S)
      记录型信号量：进程链表指针L
      AND型信号量：Swait(S,d,d)
      信号量集：Swait(S,d,t)
        Swait(S,d,d)此时在信号量集中只有一个信号量S，但允许它每次申请d个资源，当现有资源数少于d时，不予分配
        Swait(S,1,1)此时的信号量集已退化为一般的记录型信号量(S>1时)或互斥信号量(S=1)
        Swaitt(S,1,0)这是一种很特殊且很有用的信号量操作。当S>=1时，允许多个进程进入某特定区；当S变为0后，将组织任何进程进入特定区。换言之，它相当于一个可控开关
    信号量的应用：
      利用信号量实现进程互斥
      利用信号量实现前趋关系
    管程机制：Monitor
      管程的定义：一个管程定义了一个数据结构和能为并发进程所执行（在该数据结构上）的一组操作，这组操作能同步进程和改变管程中的数据
      1）管程的名称
      2）局部与管程内部的共享数据结构说明
      3）对该数据结构进行操作的一组过程
      4）对局部于管程内部的共享数据设置初始值的语句
      管程的特征：
      1）模块化。管程是一个基本程序单位，可以独立编译
      2）抽象数据类型。管程中不仅有数据，而且有对数据的操作
      3）信息掩蔽。管城中的数据结构只能被管城中的过程访问，这些过程也是在管程内部定义的，供管程外的进程调用，而管程中的数据结构以及过程的具体实现外部不可见
      
      管程和进程的不同：
      1）虽然二者都定义了数据结构，单进程定义的是私有数据结构PCB，管程定义的是共有数据结构，如消息队列
      2）二者都存在对各自数据结构上的操作，但进程是由顺序程序执行有关的操作，而管程主要是今次那个同步操作的初始化操作
      3）设置进程的目的在于实现系统的并发性，而管程的设置则是解决功能共享资源的互斥使用问题
      4）进程通过调用管城中的过程对共享数据结构实行操作，该过程就如通常的子程序一样被调用，因而管程为被动工作方式，进程则为主动工作方式
      5）进程之间能并发执行，而管程则不能与其调用者并发
      6）进程具有动态性，由“创建”而诞生，由“撤销”而消亡，而管程则是操作系统中的一个资源管理模块，供进程调用。
      
      条件变量：一种抽象数据结构
      
  经典进程的同步问题
    生产者-消费者问题：
      利用记录型信号量解决生产者-消费者问题
      利用AND信号量解决生产者-消费者问题
      利用管程解决生产者-消费者问题
    哲学家进餐问题：
      利用记录型信号量解决哲学家进餐问题
      利用AND型信号量机制解决哲学家进餐问题
    读者-写者问题：
      利用记录型信号量解决读者-写者问题
      利用信号量集机制解决读者-写者问题
      
  进程通信
    进程通信的类型：
      共享存储区系统：相互通信的进程共享某些数据结构或共享存储区，进程之间能够通过这些空间进行通信。
        基于共享数据结构的通信方式
        基于共享存储区的通信方式
      消息传递系统：进程间的数据交换是以格式化的消息(message)为单位的
        直接通信方式
        间接通信方式
      管道通信：
        互斥，即当一个进程正在对pipe执行读/写操作时，其他进程必须等待
        同步，指当写进程把一定数量的数据写入pipe，边去睡眠等待，直到进程取走数据后，再把它唤醒。
        确定对方是否存在，只有确定了对方存在时，才能进行通信。
    
    消息传递通信的实现方法：
      直接通信方式：send(receiver,message),receive(sender,message)
      间接通信方式：私用信箱、公用信箱、共享信箱
      发送者与接受者存在四种关系:
        一对一关系
        多对一关系：客户/服务器交互
        一对多关系：广播式向接收者发送消息
        多对多关系：公共信箱
        
    消息传递系统实现中的若干问题
      通信链路：P2P、多点连接链路
      通信方式：单向通信链路、双向通信链路
      通信容量：无容量链路（无缓冲区）、有容量链路（有缓冲区）
      消息的格式：首部+数据
      进程同步方式：
        发送进程和接收进程均阻塞
        发送进程不阻塞，接收进程阻塞
        发送进程和接收进程均不阻塞
    
    消息缓冲队列通信机制：
      数据结构：
        消息缓冲区
        PCB中有关通信的数据项
      发送原语
      接收原语
      
  线程
    线程的基本概念：
      线程的引入
      进程和线程的区别：调度性、并发性、系统开销、拥有资源
        调度：线程作为调度和分配的基本单位，进程作为资源拥有者的基本单位
        并发性：不仅进程之间可以并发执行，而且在一个进程中的多个线程之间亦可并发执行
        拥有资源：一般线程不拥有系统资源，线程都可以拥有资源
        系统开销：进程的创建或撤销涉及到CPU环境，而线程的创建或撤销或切换仅涉及到少量寄存器内容
      线程的属性
        轻型实体：TCB
        独立调度和分派的基本单位
        可并发执行
        共享进程资源
      线程的状态
        状态参数：
        1）寄存器状态，包括程序计数器PC和堆栈指针中的内容
        2）堆栈，在堆栈中通常保存有局部变量和返回地址
        3）线程运行状态，用于描述线程正处理何种运行状态
        4）优先级，描述线程执行的优先程度
        5）线程专有寄存器，用于保存线程自己的局部变量拷贝
        6）信号屏蔽，即对某些信号加以屏蔽
        线程运行状态：
        1）执行状态，表示线程正获得处理机而运行
        2）就绪状态，指线程一具备了各种执行条件，一旦获得CPU便可执行的状态
        3）阻塞状态，指线程在执行中因某事件而受阻，处于暂停执行时的状态
        线程的创建和终止
        多线程OS中的进程：
        1）作为系统资源分配的单位
        2）可包括多个线程
        3）进程不是一个可执行的实体
        
    线程间的同步和通信：互斥锁、条件变量、计数信号量、多读、单写锁
      互斥锁mutex：lock unlock trylock
      条件变量
      信号量机制：私用信号量、公用信号量
    线程的实现方式：
      内核支持线程KST
        1）在多处理器系统中，内核能够同时调度同一进程中多个线程并行执行
        2）如果进程中的一个线程被阻塞了，内核可以调度该进程中的其他占有处理器运行，也可以运行其他进程中的线程
        3）内核支持线程具有很小的数据结构和堆栈，线程的切换比较快，切换开销小
        4）内核本身也可以采用多线程技术，可以提高系统的执行速度和效率
      用户级线程ULT：还是以进程为调度单位
        1）线程切换不需要转换到内核空间
        2）调度算法可以是进程专用的
        3）用户级现成的实现与操作系统平台无关
        
    线程的实现：
    1）内核支持线程的实现：PTDA 与进程非常相似
    2）用户级线程的实现：
      运行时系统 runtime system
      内核控制线程：LWP light weight process
      用户级线程与内核控制线程的连接：
      1）一对一模型
      2）多对一模型
      3）多对多模型
        
      
